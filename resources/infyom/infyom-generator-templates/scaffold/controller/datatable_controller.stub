<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_DATATABLES$\$MODEL_NAME$DataTable;
use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Exception;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Routing\Redirector;

class $MODEL_NAME$Controller extends AppBaseController
{
    /** @var  $MODEL_NAME$Repository */
    private $MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repository;

    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
    {
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
    }

    public function index($MODEL_NAME$DataTable $$MODEL_NAME_CAMEL$DataTable)
    {
        return $$MODEL_NAME_CAMEL$DataTable->render('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index');
    }

    public function create(): Factory|View|Application
    {
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create');
    }

    public function store(Create$MODEL_NAME$Request $request): Redirector|Application|RedirectResponse
    {
        $input = $request->all();

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);

        flash("$MODEL_NAME_HUMAN$ <strong>$$MODEL_NAME_CAMEL$->id</strong> salvo com sucesso.", 'success');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    public function show($id): View|Factory|Redirector|Application|RedirectResponse
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            flash('$MODEL_NAME_HUMAN$ ' . __('messages.not_found'), 'error');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    public function edit($id): View|Factory|Redirector|Application|RedirectResponse
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            flash('$MODEL_NAME_HUMAN$ ' . __('messages.not_found'), 'error');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    public function update($id, Update$MODEL_NAME$Request $request): Redirector|Application|RedirectResponse
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            flash('$MODEL_NAME_HUMAN$ '. __('messages.not_found'), 'error');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($request->all(), $id);

        flash("$MODEL_NAME_HUMAN$ <strong>$$MODEL_NAME_CAMEL$->id</strong> atualizado com sucesso.", 'success');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    public function destroy($id): JsonResponse|Redirector|RedirectResponse|Application
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            if (request()->ajax()) {
                return response()->json(
                    [
                        'success' => false,
                        'error' => __('messages.not_found')
                    ]
                );
            }
            flash('$MODEL_NAME_HUMAN$ ' . __('messages.not_found'), 'error');
            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }


        $msg = sprintf(
            "$MODEL_NAME_HUMAN$ %s %s",
            trans('crud.deleted'),
            trans('crud.successfully')
        );
        try {
            $deleted = $this->$MODEL_NAME_CAMEL$Repository->delete($id);
        } catch (Exception $e) {
            $msg = 'Erro ao remover: ' . $e->getMessage();
            $deleted = false;
//            \Bugsnag::notifyException($e);
        }

        if (request()->ajax()) {
            return response()->json(
                [
                    'success' => $deleted,
                ]
            );
        }

        flash(
            $msg,
            $deleted ? 'success' : 'error'
        );

        return redirect(route('roles.index'));
    }
}
